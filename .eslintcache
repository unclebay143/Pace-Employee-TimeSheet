[{"C:\\Users\\Unclebay\\Desktop\\project\\Pace-Employee-TimeSheet\\src\\components\\workspace\\dashboard\\employeeTasks\\AcceptedTasks.js":"1","C:\\Users\\Unclebay\\Desktop\\project\\Pace-Employee-TimeSheet\\src\\reducers\\index.js":"2","C:\\Users\\Unclebay\\Desktop\\project\\Pace-Employee-TimeSheet\\src\\components\\company\\Settings\\CompanyProfile.js":"3","C:\\Users\\Unclebay\\Desktop\\project\\Pace-Employee-TimeSheet\\src\\actions\\types.js":"4","C:\\Users\\Unclebay\\Desktop\\project\\Pace-Employee-TimeSheet\\src\\components\\workspace\\dashboard\\employeeTasks\\AllTasks.js":"5"},{"size":4202,"mtime":1611187283781,"results":"6","hashOfConfig":"7"},{"size":1248,"mtime":1611187275951,"results":"8","hashOfConfig":"7"},{"size":4348,"mtime":1611187275925,"results":"9","hashOfConfig":"7"},{"size":3783,"mtime":1611187275923,"results":"10","hashOfConfig":"7"},{"size":4900,"mtime":1611187275941,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":2,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"lqflwm",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Unclebay\\Desktop\\project\\Pace-Employee-TimeSheet\\src\\components\\workspace\\dashboard\\employeeTasks\\AcceptedTasks.js",["23","24","25","26","27","28","29"],"//\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Table from '../../layouts/Table';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport filterFactory, { selectFilter } from 'react-bootstrap-table2-filter';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FETCH_TASKS_BY_STATUS_API_URL } from '../../../../services/root-endpoints';\r\nimport { authHeader, currentUserCompanyID, currentUserRoleID, currentUserStaffID } from '../../../../services/auth-header';\r\nimport axios from 'axios';\r\nimport { somethingWentWrongLogger } from '../../../../toaster';\r\nimport { formatDate } from '../../../../_helper/dateFormatter';\r\nimport Loader from '../../../loader/Loader';\r\nimport { getTasks } from '../../../../actions/task/taskAction';\r\n\r\n// Set the departments component state\r\nconst handleFormatDate = (selectedDepartmentTaskSheet) =>{\r\n  const formatedTaskSheet = selectedDepartmentTaskSheet.map((taskRecord)=> {\r\n    taskRecord.endDate = formatDate(taskRecord.endDate) \r\n    taskRecord.dateCreated = formatDate(taskRecord.dateCreated) \r\n    return taskRecord // return the formated task\r\n  })\r\n  return formatedTaskSheet\r\n}\r\n\r\nconst AcceptedTasks = () => {\r\n  const { tasks } = useSelector(state => state.tasks)\r\n  const [taskState, setTaskState] = useState([])\r\n  const dispatch = useDispatch()\r\n  const [acceptedTasks, setAcceptedTasks] = useState([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const history = useHistory();\r\n  \r\n  useEffect(() => {\r\n    // get all tasks\r\n    dispatch(getTasks())\r\n  }, [dispatch])\r\n\r\n\r\n  useEffect(() => {\r\n\r\n      if(currentUserRoleID === 5){ // check if the user is an employee, then run this\r\n        setTaskState(tasks) // set the TaskState to tasks for the component to know about the update\r\n        const getAcceptedTasks = taskState.filter((task)=>task.taskStatus === 2) // filter out the tasks with status 2\r\n        setAcceptedTasks(handleFormatDate(getAcceptedTasks))\r\n        setIsLoading(false)\r\n      }else{ // else run this block\r\n        axios.get(FETCH_TASKS_BY_STATUS_API_URL + \"2/\" + currentUserCompanyID, { headers: authHeader } )\r\n        .then((response)=>{\r\n          // Set the response to the component state\r\n          setAcceptedTasks(handleFormatDate(response.data.data))\r\n          setIsLoading(false)\r\n        })\r\n        .catch((error)=>{\r\n          // somethingWentWrongLogger()\r\n          setIsLoading(false)\r\n        })\r\n      }\r\n  }, [tasks, taskState])\r\n\r\n\r\n  // adds checkbox to each row\r\n  const selectRow = {\r\n    mode: 'checkbox',\r\n    headerColumnStyle: { backgroundColor: 'transparent' }\r\n  };\r\n  // styles each row\r\n  const rowStyle = {\r\n    cursor: 'pointer'\r\n  }\r\n  // routes to full task details page on double click\r\n  const taskDetails =  {\r\n    onClick: (e, row, rowIndex) => \r\n    { \r\n      history.push(`/dashboard/task/view-task/`+ row.taskID)\r\n    }\r\n  };\r\n\r\n  // If the task list is been fetched from the server or not mounted on the ui, show the loader \r\n  if(isFetching){\r\n    return(\r\n        <>\r\n            <Loader />\r\n        </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div >\r\n      \r\n      <Table\r\n        keyField='id'\r\n        title=\"Accepted Task\"\r\n        data={ usersTasksByStatus }\r\n        columns={taskHeader}\r\n        bordered= { false }\r\n        selectRow = { selectRow }\r\n        enableSearch = { true }\r\n        pagination = { paginationFactory() }\r\n        // controlHeader = { navigate }\r\n        rowEvents = { taskDetails }\r\n        noDataIndication={'No available task'}\r\n        filter={ filterFactory() }\r\n        rowStyle={ rowStyle }\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst taskHeader = [\r\n\r\n  {\r\n    dataField: 'taskName',\r\n    text: 'Title',\r\n    headerAttrs: {\r\n      hidden:true\r\n    }\r\n  },\r\n  {\r\n    dataField: 'endDate',\r\n    text: 'Due Date',\r\n    headerAttrs: {\r\n      hidden:true\r\n    }\r\n  },\r\n  {\r\n    dataField: 'documentsAttached',\r\n    text: 'Attachment',\r\n    formatter: (cell, row) => {\r\n      if(!cell){\r\n      return(\r\n        <i class=\"fa fa-paperclip\" />\r\n      )}\r\n    },\r\n    headerAttrs: {\r\n      hidden:true\r\n    }\r\n  },\r\n];\r\n\r\nexport default AcceptedTasks;","C:\\Users\\Unclebay\\Desktop\\project\\Pace-Employee-TimeSheet\\src\\reducers\\index.js",[],"C:\\Users\\Unclebay\\Desktop\\project\\Pace-Employee-TimeSheet\\src\\components\\company\\Settings\\CompanyProfile.js",["30","31"],"C:\\Users\\Unclebay\\Desktop\\project\\Pace-Employee-TimeSheet\\src\\actions\\types.js",[],"C:\\Users\\Unclebay\\Desktop\\project\\Pace-Employee-TimeSheet\\src\\components\\workspace\\dashboard\\employeeTasks\\AllTasks.js",["32","33","34","35","36","37","38","39"],{"ruleId":"40","severity":1,"message":"41","line":8,"column":25,"nodeType":"42","messageId":"43","endLine":8,"endColumn":37},{"ruleId":"40","severity":1,"message":"44","line":11,"column":63,"nodeType":"42","messageId":"43","endLine":11,"endColumn":81},{"ruleId":"40","severity":1,"message":"45","line":13,"column":10,"nodeType":"42","messageId":"43","endLine":13,"endColumn":34},{"ruleId":"40","severity":1,"message":"46","line":32,"column":10,"nodeType":"42","messageId":"43","endLine":32,"endColumn":23},{"ruleId":"40","severity":1,"message":"47","line":33,"column":10,"nodeType":"42","messageId":"43","endLine":33,"endColumn":19},{"ruleId":"48","severity":2,"message":"49","line":82,"column":6,"nodeType":"42","messageId":"50","endLine":82,"endColumn":16},{"ruleId":"48","severity":2,"message":"51","line":96,"column":16,"nodeType":"42","messageId":"50","endLine":96,"endColumn":34},{"ruleId":"40","severity":1,"message":"52","line":5,"column":10,"nodeType":"42","messageId":"43","endLine":5,"endColumn":20},{"ruleId":"40","severity":1,"message":"53","line":44,"column":11,"nodeType":"42","messageId":"43","endLine":44,"endColumn":17},{"ruleId":"40","severity":1,"message":"54","line":1,"column":28,"nodeType":"42","messageId":"43","endLine":1,"endColumn":36},{"ruleId":"40","severity":1,"message":"41","line":6,"column":25,"nodeType":"42","messageId":"43","endLine":6,"endColumn":37},{"ruleId":"40","severity":1,"message":"55","line":62,"column":9,"nodeType":"42","messageId":"43","endLine":62,"endColumn":15},{"ruleId":"40","severity":1,"message":"56","line":156,"column":7,"nodeType":"42","messageId":"43","endLine":156,"endColumn":15},{"ruleId":"57","severity":1,"message":"58","line":181,"column":1,"nodeType":"59","endLine":181,"endColumn":62},{"ruleId":"57","severity":1,"message":"58","line":186,"column":7,"nodeType":"59","endLine":186,"endColumn":19},{"ruleId":"57","severity":1,"message":"58","line":187,"column":7,"nodeType":"59","endLine":187,"endColumn":19},{"ruleId":"57","severity":1,"message":"58","line":189,"column":7,"nodeType":"59","endLine":189,"endColumn":19},"no-unused-vars","'selectFilter' is defined but never used.","Identifier","unusedVar","'currentUserStaffID' is defined but never used.","'somethingWentWrongLogger' is defined but never used.","'acceptedTasks' is assigned a value but never used.","'isLoading' is assigned a value but never used.","no-undef","'isFetching' is not defined.","undef","'usersTasksByStatus' is not defined.","'useHistory' is defined but never used.","'params' is assigned a value but never used.","'useState' is defined but never used.","'taskss' is assigned a value but never used.","'navigate' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]